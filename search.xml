<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【Leetcode系列】：三数之和</title>
    <url>/three-sum/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">1. 三数之和</a></p>
<blockquote>
<p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。<br>示例:<br>给定数组 nums = [-1, 0, 1, 2, -1, -4]，<br>满足要求的三元组集合为：<br>[[-1, 0, 1],[-1, -1, 2]]</p>
</blockquote>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><ol>
<li>要求a + b + c = 0 ==&gt; a + b = -c</li>
<li>数组无序且存在重复元素，但是结果中不可以包含重复的三元组</li>
<li>可能没有满足条件的情况，返回空数组</li>
</ol>
<h4 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h4><p><strong>解题思路</strong></p>
<p>采用三层循环的方式，最外层循环固定一个元素 <strong><em>nums[i]</em></strong>，第二层循环从元素 <strong><em>nums[i]下一个元素 j = i + 1，nums[j]</em></strong>开始遍历，第三层循环则从元素 <strong><em>nums[j]下一个元素 k = j + 1，nums[k]</em></strong>开始遍历，然后判断三个元素相加是否满足以下条件：<strong><em>nums[i] + nums[j] + nums[k] == 0</em></strong></p>
<p><strong>代码示例</strong></p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    Set&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; nums.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>) &#123;</span><br><span class="line">                    List&lt;Integer&gt; value = Arrays.asList(nums[i], nums[j], nums[k]);</span><br><span class="line">                    result.add(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>复杂度分析</strong></p>
<p>时间复杂度：O(n^3)</p>
<p>空间复杂度：O(1)</p>
<h4 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h4><p><strong>解题思路</strong></p>
<p>题目要求为a + b + c = 0可以推出 <strong><em>a + b = -c</em></strong>，将三数之和转化为两数求和的问题。外层循环固定某个元素 <strong><em>nums[i]</em></strong>，然后再剩下的元素中找到两个元素相加等于-nums[i]的情况。</p>
<p><strong>代码示例</strong></p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> target = -nums[i];</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(nums.length - i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = target - nums[j];</span><br><span class="line">            Integer exist = hashMap.get(v);</span><br><span class="line">            <span class="keyword">if</span> (exist != <span class="keyword">null</span>) &#123;</span><br><span class="line">                List&lt;Integer&gt; list = Arrays.asList(nums[i], exist, nums[j]);</span><br><span class="line">                list.sort(Comparator.naturalOrder());</span><br><span class="line">                result.add(list);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hashMap.put(nums[j], nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>复杂度分析</strong></p>
<p>时间复杂度：O(n^2)</p>
<p>空间复杂度：O(n)</p>
<h4 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h4><p><strong>解题思路</strong></p>
<p>有方法二中可以得知 <strong><em>a + b = -c</em></strong>，在外层循环中固定元素 <strong><em>nums[i]</em></strong>，然后再剩余元素中找到两元素相加和为-nums[i]的情况。此时若将数组元素有序，则可通过双指针的方式进行元素遍历，加快元素查找。数组有序，若nums[i]&gt;0，则后续数组元素必大于零，不可能满足条件；否则使用双指针l=i+1和r=len-1遍历数组剩余元素，若 <strong><em>nums[l]+nums[r]+nums[i] &gt; 0</em></strong> 则高位指针r向中间移动，否则低位指针l向中间移动；若 <strong><em>nums[l]+nums[r]+nums[i]=0</em></strong> 则通过判断l、r指针与其前/后元素是否相同加速指针移动。</p>
<p><strong>代码示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = i + <span class="number">1</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = nums[i] + nums[l] + nums[r];</span><br><span class="line">            <span class="keyword">if</span> ( sum == <span class="number">0</span>) &#123;</span><br><span class="line">                res.add(Arrays.asList(nums[i],nums[l],nums[r]));</span><br><span class="line">                <span class="keyword">while</span> (l&lt;r &amp;&amp; nums[l] == nums[++l]);</span><br><span class="line">                <span class="keyword">while</span> (l&lt;r &amp;&amp; nums[r] == nums[--r]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>复杂度分析</strong></p>
<p>时间复杂度：O(n^2)</p>
<p>空间复杂度：O(1)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>【Leetcode系列】：两数之和</title>
    <url>/two-sum/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></p>
<blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br>示例:<br>给定 nums = [2, 7, 11, 15],   target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
</blockquote>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><h4 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h4><p><strong>解题思路</strong></p>
<p>首先我们可以通过两层循环的方式来求解，外层循环用于固定元素<strong><em>nums[i]</em></strong> ，内存循环从下标<strong><em>j=i+1</em></strong>开始遍历至数组结尾，比较两数之和<strong><em>nums[i] + nums[j]</em></strong>与target值是否相等，若相等则直接返回结果<strong><em>[i,j]</em></strong>。  </p>
<p><strong>代码示例</strong></p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; i &lt; nums.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">  nums_len = len(nums)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(nums_len):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, nums_len):</span><br><span class="line">      <span class="keyword">if</span> nums[i] == target - nums[j]:</span><br><span class="line">        <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure>

<p>Go:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">      <span class="keyword">if</span> nums[i] + nums[j] == target &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;i,j&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>时间复杂度：O(n^2)</p>
<p>空间复杂度：O(1)</p>
<h4 id="方法二：两遍哈希表遍历"><a href="#方法二：两遍哈希表遍历" class="headerlink" title="方法二：两遍哈希表遍历"></a>方法二：两遍哈希表遍历</h4><p><strong>解题思路</strong></p>
<p>暴力法解决该问题采用两层循环方式，时间复杂度较高为O(n^2)，我们可采用<strong><em>空间换时间</em></strong>的方式降低算法的时间复杂度。哈希表的查询时间复杂度为O(1)，我们可以将数组元素作为key，元素下标作为value存入哈希表中。遍历数组元素<strong><em>nums[i]</em></strong>，计算差值<strong><em>target - nums[i]</em></strong>，判断差值是否在哈希表中且下标值不为i，若存在则将元素下标返回。</p>
<p><strong>代码示例</strong></p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    map.put(nums[i], i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> diff = target - nums[i];</span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(diff) &amp;&amp; map.get(diff) != i) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, map.get(diff)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">  nums_map = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> key, value <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">    nums_map[value] = key</span><br><span class="line">  <span class="keyword">for</span> key, value <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">    left = target - value</span><br><span class="line">    <span class="keyword">if</span> nums_map.get(left, <span class="literal">False</span>) <span class="keyword">and</span> key != nums_map[left]:</span><br><span class="line">      <span class="keyword">return</span> [key, nums_map[left]]</span><br></pre></td></tr></table></figure>

<p>Go:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  numsMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">  <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    numsMap[num] = i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    <span class="keyword">if</span> j, exist := numsMap[target - num]; exist &amp;&amp; i != j &#123;</span><br><span class="line">      <span class="keyword">return</span> []<span class="keyword">int</span>&#123;i, j&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(n)</p>
<h4 id="方法三：一遍哈希表遍历"><a href="#方法三：一遍哈希表遍历" class="headerlink" title="方法三：一遍哈希表遍历"></a>方法三：一遍哈希表遍历</h4><p><strong>解题思路</strong></p>
<p>题目中提到<strong><em>不能重复利用这个数组中同样的元素</em></strong>，我们可以考虑只采用一次遍历的方式求解。在遍历数组元素<strong><em>nums[i]</em></strong>的过程中我们可以判断差值<strong><em>target-nums[i]</em></strong>是否存在于哈希表中，若不存在则将<strong><em>nums[i]</em></strong>的值作为key，下标作为value存入哈希表中，否则直接返回结果。</p>
<p><strong>代码示例</strong></p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> diff = target - nums[i];</span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(diff)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(diff), i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(nums[i], i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">  nums_map = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> key, value <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">    left = target - value</span><br><span class="line">    <span class="keyword">if</span> left <span class="keyword">in</span> nums_map:</span><br><span class="line">      <span class="keyword">return</span> [nums_map[left], key]</span><br><span class="line">    nums_map[value] = key</span><br></pre></td></tr></table></figure>

<p>Go:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  numsMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">  <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    <span class="keyword">if</span> j, exist := numsMap[target - num]; exist &#123;</span><br><span class="line">      <span class="keyword">return</span> []<span class="keyword">int</span>&#123;j, i&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    numsMap[num] = i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong></p>
<p>时间复杂度：O(n)</p>
<p>空间复杂度：O(n)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
</search>
